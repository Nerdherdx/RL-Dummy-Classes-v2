/*******************************************************************************
 * CarComponent_Dodge_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CarComponent_Dodge_TA extends CarComponent_TA
    native
    notplaceable;

/** Range of 0...1 where the car's input decides if we can do a directional dodge */
var() float DodgeInputThreshold;
/** How much sideways impulse to apply */
var() float SideDodgeImpulse;
/** Scale sideways impulse when going max forward speed */
var() float SideDodgeImpulseMaxSpeedScale;
/** How much forward impulse to apply */
var() float ForwardDodgeImpulse;
/** Scale forward impulse when going max forward speed */
var() float ForwardDodgeImpulseMaxSpeedScale;
/** How much backward impulse to apply */
var() float BackwardDodgeImpulse;
/** Scale backward impulse when going max forward speed */
var() float BackwardDodgeImpulseMaxSpeedScale;
/** Torque force to apply over time when dodging to the side */
var() float SideDodgeTorque;
/** Torque force to apply over time when dodging forward */
var() float ForwardDodgeTorque;
/** How long we should apply torque forces for */
var() float DodgeTorqueTime;
/** Reduce the car's Z velocity by this % when dodging */
var() float DodgeZDamping;
/** Delay before we turn on the DodgeZDamping */
var() float DodgeZDampingDelay;
/** Delay before we turn on the DodgeZDamping */
var() float DodgeZDampingUpTime;
var() float DodgeImpulseScale;
var() float DodgeTorqueScale;
/** FX actor events */
var() name JumpEvent;
/** FX actor events */
//var() @NULL DoubleJumpEvent;
/** FX actor events */
var() NamedEvent DodgeEvent;
//var private transient @NULL DodgeTorque;
//var private transient @NULL DodgeDirection;

protected simulated function OnCreated()
{
    //return;    
}

function bool CanActivate()
{
    //return ReturnValue;    
}

protected event ApplyForces(float ActiveTime)
{
    //return;    
}
/**
simulated function @NULL GetDodgeImpulse(@NULL DodgeDir)
{
    
    //return ReturnValue;    
}
**/
protected simulated function ApplyDodgeImpulse()
{
    //return;    
}

protected function ApplyTorqueForces(float ActiveTime)
{
   
    //return;    
}

state Active
{
    simulated event BeginState(name P)
    {
        
        //return;        
    }

    protected function SetDodgeSettings()
    {
        
        //return;        
    }

    protected event PrePhysicsStep(float DeltaTime)
    {
        //return;        
    }
        
}