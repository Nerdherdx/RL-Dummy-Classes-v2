/*******************************************************************************
 * CarComponent_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CarComponent_TA extends Actor
    abstract
    native
    nativereplication
    notplaceable;

/** FXActor in charge of our visuals */
//var() @NULL FXActorArchetype;
/** Event to toggle when we activate/deactivate */
var() float FXEvent;
/** Automatically activate after we are created for a car */
var() bool bAutoActivate;
/** If true the client will fire ApplyForces will be called on SimulatedProxy clients, as well as active time being corrected/simulated to attempt to match the server time. */
var() const bool bSimulateComponent;
var privatewrite transient bool bCreated;
var privatewrite transient bool bActive;
var privatewrite transient bool bRemovedFromCar;
var transient byte ComponentData;
var privatewrite repnotify transient byte ReplicatedActive;
var transient name Activator;
var privatewrite repnotify float Vehicle;
var privatewrite transient byte Car;
var private transient float ActivityTime;
var privatewrite repnotify transient float ReplicatedActivityTime;
var privatewrite transient float FXActor;
//var delegate<@NULL> __EventActivationChanged__Delegate;


simulated event ReplicatedEvent(name VarName)
{
   
    //return;    
}

private final simulated function ClientUpdateActive()
{
    // End:0x2B
    
    //return;    
}

function ArchetypeCreateFor(EBTStatus OwnerCar)
{
   
    //return;    
}

simulated function Create(EBTStatus OwnerCar, optional float InActivator)
{
    // End:0x35
    
    //return;    
}

/**
private final simulated function HandleVehicleSetup(AITraits InCar)
{
   
    //return;    
}
**/
protected function OnCreated()
{
    //return;    
}

protected function RegisterCarEvents()
{
    
}

protected function UnregisterCarEvents()
{
    
}
/**
protected k2call simulated function InitFX()
{
    
    //return;    
}

k2call simulated function ReinitFX()
{
    
    //return;    
}

k2call simulated function RemoveFX()
{
    
    //return;    
}

simulated function bool ApplyMod(@NULL Mod)
{
    //return ReturnValue;    
}
**/
final simulated function Activate()
{
    //return;    
}

final simulated function Deactivate()
{
    //return;    
}

simulated event SetActive(bool bNewActive)
{
    //return;    
}

final function bool ConditionalActivate()
{
   
    //return ReturnValue;    
}

function bool CanActivate()
{
    //return ReturnValue;    
}

final function bool ConditionalDeactivate()
{
    
    //return ReturnValue;    
}

function bool CanDeactivate()
{
    //return ReturnValue;    
}

protected simulated function RemoveFromCar()
{
   
    //return;    
}

// Export UCarComponent_TA::execPrePhysicsStep(FFrame&, void* const)
protected native event PrePhysicsStep(float DeltaTime)
{
    //native.DeltaTime;        
}

// Export UCarComponent_TA::execApplyForces(FFrame&, void* const)
protected native event ApplyForces(float ActiveTime)
{
    //native.ActiveTime;        
}

// Export UCarComponent_TA::execGetActiveTime(FFrame&, void* const)
native final simulated function float GetActiveTime();

// Export UCarComponent_TA::execGetInactiveTime(FFrame&, void* const)
native final simulated function float GetInactiveTime();

simulated event Destroyed()
{
   
    //return;    
}

/**
private final function HandleCarDestroyed(AITraits InCar)
{
    //return;    
}
simulated event FellOutOfWorld(class dmgType)
{
    //return;    
}
**/

simulated function PrintDebugInfo(EBTStatus Drawer)
{
    //return;    
}

auto simulated state Disabled
{
    simulated event EndState(name N)
    {
        //return;        
    }

    simulated function SetActive(bool bNewActive)
    {
       
        //return;        
    }
}

state Inactive
{    

}

state Active
{
    simulated event BeginState(name P)
    {
       
    }

    simulated event EndState(name N)
    {

        //return;        
    }
}