/*******************************************************************************
 * ProductAsset_Bot_TA generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class ProductAsset_Body_TA extends ProductAsset_TA
    native
    editinlinenew;

struct native VehicleWheelSettings
{
    /** Bone on mesh to attach the wheel to */
    var() name BoneName;

    structdefaultproperties
    {
        BoneName=None
    }
};

struct native VehicleAxleSettings
{
    var() float WheelRadius;
    var() float WheelWidth;
    var() float WheelMeshOffsetSide;
    var() float WheelOffsetForward;
    var() float WheelOffsetSide;
    var() VehicleWheelSettings LeftWheel;
    var() VehicleWheelSettings RightWheel;

    structdefaultproperties
    {
        WheelRadius=15.0
        WheelWidth=15.0
        WheelMeshOffsetSide=0.0
        WheelOffsetForward=0.0
        WheelOffsetSide=0.0
        LeftWheel=(BoneName=None)
        RightWheel=(BoneName=None)
    }
};

struct native TeamPaintFinish
{
    /** Team finish product ID */
    var() ProductAsset_PaintFinish_TA TeamFinish;
    /** Team finish product ID// Custom finish product ID
 */
    var() ProductAsset_PaintFinish_TA CustomFinish;

    structdefaultproperties
    {
        TeamFinish=none
        CustomFinish=none
    }
};

/** Static mesh for vehicle body */
var() SkeletalMesh Mesh<RebuildThumbnail=>;
/** Animation tree for frame/chassis */
var() AnimTree AnimTreeTemplate;
/** Physics asset */
var() PhysicsAsset PhysicsAsset;
/** Settings for front axle */
var() VehicleAxleSettings FrontAxle<RebuildThumbnail=>;
/** Settings for rear axle */
var() VehicleAxleSettings BackAxle<RebuildThumbnail=>;
/** Scale from default vehicle mass */
var() float MassScale;
/** Z-damping to apply to ball hits */
var() float BallHitZDamping;
/** Spring settings for bouncy chassis */
var() SimpleSpringSettings ChassisSpring;
/** Overall scaler for bouncy chassis rotation */
var() float ChassisRotationScale;
/** Overall scaler for bouncy chassis translation */
var() float ChassisTranslationScale;
/** Max suspension travel for wheels */
var() float SuspensionTravelMax;
/** Max suspension travel for wheels */
var() float SuspensionTravelMin;
/** Engine and exhaust sounds */
var() AkSoundCue EngineSound;
/** Engine and exhaust sounds */
var() AkSoundCue ExhaustSound;
/** FX actor specific to this body (ambient effects) */
var() FXActor_X FXActor;
/** Material index for skin */
var() int SkinMaterialIndex;
/** Material index for brakelights */
var() int BrakelightMaterialIndex;
/** Material index for chassis */
var() int ChassisMaterialIndex;
/** Override sockets to spawn boost emitters from. If not specified, will kep the one emitter at RocketBoost socket */
var() array<name> BoostEmitterSockets;
/** How far the boost flaps turn (degrees) */
var() float BoostFlapsAngle;
/** Force the player to use these attachments when using this body */
var() array<ProductAsset_TA> ForcedProducts;
/** Force the player to use these paint finishes when using this body */
var() TeamPaintFinish ForcedPaintFinishes[2];
/** Force player to use this custom color when using this body */
var() LinearColor ForcedCustomColor;
/** Additional products unlocked when this asset is unlocked */
var() editinline ProductReferenceArray_TA AdditionalUnlocks;
/** Additional persistent attachments */
var() array<ProductAttachment> Attachments;
/** Paramaters to set on the boost particles */
var() array<ParticleSysParam> BoostParticleParameters;
/** Particle for supersonic wheel fx */
var() ParticleSystem SupersonicWheelTemplate;
/** FX Actor for demolish explosion */
var() FXActor_X DemolishFX;
/** FX Actor for spawning */
var() FXActor_X SpawnFX;
var(Thumbnail) editoronly ProductAsset_Wheel_TA ThumbnailWheelAsset<RebuildThumbnail=>;
//var array<SkeletalMeshLODDistanceInfo> LODDistanceInfo;