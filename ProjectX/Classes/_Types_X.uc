/*******************************************************************************
 * _Types_X generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib Â© 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class _Types_X extends Object
    abstract
    native;

enum EPlayerTitleType
{
    PlayerTitleType_None,
    PlayerTitleType_XP,
    PlayerTitleType_Developer,
    PlayerTitleType_Helper,
    PlayerTitleType_Participant,
    PlayerTitleType_Champion,
    PlayerTitleType_MAX
};

enum EReservationStatus
{
    ReservationStatus_None,
    ReservationStatus_Reserved,
    ReservationStatus_Joining,
    ReservationStatus_InGame,
    ReservationStatus_MAX
};

enum ENoPartyMatchmaking
{
    NoPartyMM_InOnlineGame,
    NoPartyMM_NeedsToAgreeToPrivacyNotice,
    NoPartyMM_MAX
};

enum EUINavigationMode
{
    UINavigationMode_Keyboard,
    UINavigationMode_Gamepad,
    UINavigationMode_Cursor,
    UINavigationMode_MAX
};

enum EButtonPressType
{
    BPT_Normal,
    BPT_Tap,
    BPT_Hold,
    BPT_DoubleTap,
    BPT_Toggle,
    BPT_MAX
};

enum EAxisSign
{
    AxisSign_None,
    AxisSign_Positive,
    AxisSign_Negative,
    AxisSign_MAX
};

enum ERemappable
{
    Remappable_All,
    Remappable_Key,
    Remappable_Axis,
    Remappable_KeyTriggerAxis,
    Remappable_None,
    Remappable_MAX
};

enum EDatabaseEnvironment
{
    DBE_Test,
    DBE_Dev,
    DBE_DevLocal,
    DBE_Production,
    DBE_MAX
};

enum EAuthResult
{
    AuthResult_OK,
    AuthResult_Unauthorized,
    AuthResult_MAX
};

enum EJoinMatchType
{
    JMT_Public,
    JMT_Private,
    JMT_LanHost,
    JMT_LanGuest,
    JMT_MAX
};

enum EWebRequestAuthorization
{
    WRA_Offline,
    WRA_Authorizing,
    WRA_Authorized,
    WRA_Banned,
    WRA_MAX
};

struct native RenderProfile
{
    var float RenderThreadTime;
    var float GPUTime;
    var float FrameTime;
    var float AccumRenderThreadTime;
    var float AccumGPUTime;
    var float AccumFrameTime;
    var int NumSamples;

    structdefaultproperties
    {
        RenderThreadTime=0.0
        GPUTime=0.0
        FrameTime=0.0
        AccumRenderThreadTime=0.0
        AccumGPUTime=0.0
        AccumFrameTime=0.0
        NumSamples=0
    }
};

struct PlayerTitleData
{
    var databinding name Id;
    var databinding string Text;
    var databinding byte Type;

    structdefaultproperties
    {
        Id=None
        Text=""
        Type=EPlayerTitleType.PlayerTitleType_None
    }
};
/*
struct PartyMember
{
    var @NULL PrimaryMemberId;
    var GetDefaultObject MemberId;
    var string MemberName;
    var int NoMatchmakeReasons;
    var int LocalControllerId;
    var bool bDisableCrossPlay;
    var @NULL TradingMemberId;
    var @NULL TradeId;
    var bool bReadyToTrade;

    structdefaultproperties
    {
        PrimaryMemberId=
/* Exception thrown while deserializing PrimaryMemberId
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        MemberId=
/* Exception thrown while deserializing MemberId
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        MemberName=""
        NoMatchmakeReasons=0
        LocalControllerId=-1
        bDisableCrossPlay=false
        TradingMemberId=
/* Exception thrown while deserializing TradingMemberId
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        TradeId=(A=0,B=0,C=0,D=0)
        bReadyToTrade=false
    }
};*/

struct CachedRegionPing
{
    var name Name;
    var float AvgPing;

    structdefaultproperties
    {
        Name=None
        AvgPing=0.0
    }
};

struct native SkillRating
{
    var float Mu;
    var float Sigma;

    structdefaultproperties
    {
        Mu=25.0
        Sigma=8.3330
    }
};

struct TierSkillRating extends SkillRating
{
    var int Tier;
    var int Division;
    var int MatchesPlayed;
    var float MMR;
};
/*
struct PlayerSkillRating extends TierSkillRating
{
    var GetDefaultObject PlayerID;

    structdefaultproperties
    {
        PlayerID=
/* Exception thrown while deserializing PlayerID
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    }
};

struct PlaylistSkillRating extends PlayerSkillRating
{
    var int Playlist;
};

struct PlaylistTierSkillRating extends TierSkillRating
{
    var int Playlist;
};

struct native KeyHandler
{
    var name Key;
    var delegate<class> Handler;

    structdefaultproperties
    {
        Key=None
        
/* Exception thrown while deserializing Handler
System.ArgumentOutOfRangeException: Length cannot be less than zero.
Parameter name: length
   at System.String.Substring(Int32 startIndex, Int32 length)
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
    }
};*/

struct native BindingAction
{
    var databinding name Action;
    var databinding name Category;
    var databinding name Axis;
    var databinding byte AxisSign;
    var string Command;
    var bool bDisableRemapping;
    var int Priority;

    structdefaultproperties
    {
        Action=None
        Category=None
        Axis=None
        AxisSign=EAxisSign.AxisSign_None
        Command=""
        bDisableRemapping=false
        Priority=0
    }
};

struct native PlayerBinding
{
    var databinding name Action;
    var databinding name Key;
    var databinding byte AxisSign;
    var databinding byte PressType;
    var databinding float Speed;
    var databinding bool bRequired;
    var byte Remappable;
    var transient float PressedTime;
    var transient float ReleasedTime;
    var transient bool bTapped;
    var transient bool bToggled;

    structdefaultproperties
    {
        Action=None
        Key=None
        AxisSign=EAxisSign.AxisSign_None
        PressType=EButtonPressType.BPT_Normal
        Speed=0.0
        bRequired=false
        Remappable=ERemappable.Remappable_All
        PressedTime=0.0
        ReleasedTime=0.0
        bTapped=false
        bToggled=false
    }
};
/*
struct native Ray
{
    var @NULL Origin;
    var @NULL Dir;

    structdefaultproperties
    {
        Origin=(X=0.0,Y=0.0,Z=0.0)
        Dir=(X=0.0,Y=0.0,Z=0.0)
    }
};*/

struct native CustomAnimSettings
{
    var() name AnimName;
    var() bool bLoop;
    var() float BlendInTime;
    /** // if -1, the animation must be ended manually
 */
    var() float BlendOutTime;
    /** // if -1, the animation must be ended manually
 */
    var() float StartTime;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() float EndTime;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() float Rate;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() byte RootMotionMode;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() byte RootBoneAxis;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() byte RootMotionRotationMode;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() byte RootBoneRotationAxis;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    //var() @NULL RootMotionAccelScale;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() bool bOverride;
    /** // if -1, the animation must be ended manually
// if less than 0, will subtract from the real end time
 */
    var() bool bMirrored;

    structdefaultproperties
    {
        AnimName=None
        bLoop=false
        BlendInTime=0.150
        BlendOutTime=0.150
        StartTime=0.0
        EndTime=0.0
        Rate=1.0
        RootMotionMode=ERootMotionMode.RMM_Ignore
        RootBoneAxis=ERootBoneAxis.RBA_Discard
        RootMotionRotationMode=ERootMotionRotationMode.RMRM_Ignore
        RootBoneRotationAxis=ERootRotationOption.RRO_Default
        RootMotionAccelScale=(X=1.0,Y=1.0,Z=1.0)
        bOverride=true
        bMirrored=false
    }
};
/*
struct native UIWidgetMatrix
{
    var GetDefaultObject Position;
    var GetLanguageExtension Size;
    var DumpUnreferencedAnims Scale;
    var GetLanguageExtension Tint;

    structdefaultproperties
    {
        Position=(X=0.0,Y=0.0,Z=0.0)
        Size=(X=0.0,Y=0.0,Z=0.0)
        Scale=(X=1.0,Y=1.0,Z=0.0)
        Tint=(R=1.0,G=1.0,B=1.0,A=1.0)
    }
};*/

struct native UIAnimValue
{
    var float X;
    var float Y;
    var float R;
    var float G;
    var float B;
    var float A;

    structdefaultproperties
    {
        X=0.0
        Y=0.0
        R=0.0
        G=0.0
        B=0.0
        A=0.0
    }
};

struct native UITimer
{
    var() name Event;
    var() float Delay;

    structdefaultproperties
    {
        Event=None
        Delay=0.0
    }
};

struct native ProcedureKeyValuePair
{
    var name Key;
    var string Value;

    structdefaultproperties
    {
        Key=None
        Value=""
    }
};

struct native ProcedureResult
{
    var array< class > KVPairs;

    structdefaultproperties
    {
        KVPairs=none
    }
};

struct native ReplicatedRBState
{
    var vector Location;
    var rotator Rotation;
    var vector LinearVelocity;
    var vector AngularVelocity;
    var bool bSleeping;
    var bool bNewData;
    var float Time;

    structdefaultproperties
    {
        Location=(X=0.0,Y=0.0,Z=0.0)
        Rotation=(Pitch=0,Yaw=0,Roll=0)
        LinearVelocity=(X=0.0,Y=0.0,Z=0.0)
        AngularVelocity=(X=0.0,Y=0.0,Z=0.0)
        bSleeping=false
        bNewData=false
        Time=0.0
    }
};
/*
struct native GamePlaylist
{
    var string FriendlyName;
    var name Id;
    var array GameTags;

    structdefaultproperties
    {
        FriendlyName=""
        Id=None
        GameTags=none
    }
};*/
/*
struct ReservationPlayerData
{
    var GetDefaultObject PlayerID;
    var string PlayerName;
    var float SkillMu;
    var float SkillSigma;
    var int Tier;
    var bool bRemotePlayer;
    var array< class > Loadout;

    structdefaultproperties
    {
        PlayerID=
/* Exception thrown while deserializing PlayerID
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        PlayerName=""
        SkillMu=0.0
        SkillSigma=0.0
        Tier=0
        bRemotePlayer=false
        Loadout=none
    }
};

struct ReplicatedReservationData
{
    var GetDefaultObject PlayerID;
    var string PlayerName;
    var byte Status;

    structdefaultproperties
    {
        PlayerID=
/* Exception thrown while deserializing PlayerID
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        PlayerName=""
        Status=EReservationStatus.ReservationStatus_None
    }
};

struct native LastTimePeriodLeaderData
{
    var string LeaderboardId;
    var array PlayerNames;
    var int Value;

    structdefaultproperties
    {
        LeaderboardId=""
        PlayerNames=none
        Value=0
    }
};

struct native ClubColorSet
{
    var byte TeamColorID;
    var byte CustomColorID;
    var bool bTeamColorSet;
    var bool bCustomColorSet;

    structdefaultproperties
    {
        TeamColorID=0
        CustomColorID=0
        bTeamColorSet=false
        bCustomColorSet=false
    }
};*/

struct native CustomMatchTeamSettings
{
    var string Name;
    //var @NULL Colors;

    structdefaultproperties
    {
        Name=""
        Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false)
    }
};

struct native CustomMatchSettings
{
    var string GameTags;
    var name MapName;
    var byte GameMode;
    var int MaxPlayerCount;
    var string ServerName;
    var string Password;
    var bool bPublic;
    //var @NULL TeamSettings[2];

    structdefaultproperties
    {
        GameTags=""
        MapName=None
        GameMode=0
        MaxPlayerCount=0
        ServerName=""
        Password=""
        bPublic=false
        TeamSettings[0]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false))
        TeamSettings[1]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false))
    }
};

struct JoinMatchSettings
{
    var byte MatchType;
    var int PlaylistId;
    var bool bFriendJoin;
    var bool bMigration;
    var bool bRankedReconnect;
    var string Password;

    structdefaultproperties
    {
        MatchType=EJoinMatchType.JMT_Public
        PlaylistId=0
        bFriendJoin=false
        bMigration=false
        bRankedReconnect=false
        Password=""
    }
};
/*
struct SkillMatchPlayer
{
    var GetDefaultObject PlayerID;
    var float PctTimePlayed;
    var bool bQuitter;
    var int PartyID;

    structdefaultproperties
    {
        PlayerID=
/* Exception thrown while deserializing PlayerID
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        PctTimePlayed=0.0
        bQuitter=false
        PartyID=0
    }
};

struct ServerResult
{
    var string IP;
    var string ServerName;
    var GetDefaultObject Settings;

    structdefaultproperties
    {
        IP=""
        ServerName=""
        Settings=(GameTags="",MapName=None,GameMode=0,MaxPlayerCount=0,ServerName="",Password="",bPublic=false,TeamSettings=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false)),TeamSettings[1]=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false)))
    }
};

struct RecordedMatchPlayer
{
    var GetDefaultObject PlayerID;
    var int Team;
    var float TimePlayed;
    var bool bInGame;
    var bool bQuitter;
    var int PartyID;

    structdefaultproperties
    {
        PlayerID=
/* Exception thrown while deserializing PlayerID
System.ArgumentException: Requested value 'QWordProperty' was not found.
   at System.Enum.EnumResult.SetFailure(ParseFailureKind failure, String failureMessageID, Object failureMessageFormatArgument)
   at System.Enum.TryParseEnum(Type enumType, String value, Boolean ignoreCase, EnumResult& parseResult)
   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)
   at UELib.Core.UDefaultProperty.Deserialize()
   at UELib.Core.UDefaultProperty.DeserializeDefaultPropertyValue(PropertyType type, DeserializeFlags& deserializeFlags) */
        Team=0
        TimePlayed=0.0
        bInGame=false
        bQuitter=false
        PartyID=0
    }
};*/

struct RecordedMatchData
{
    var Qword ServerID;
    var int Playlist;
    var int WinningTeam;
    var int Team0Score;
    var int Team1Score;
    var bool bOverTime;
};

struct SkillMatchParty
{
    var int PartyID;
    var float PctTimePlayed;
    var bool bQuitter;
    var array< class > Players;

    structdefaultproperties
    {
        PartyID=0
        PctTimePlayed=0.0
        bQuitter=false
        Players=none
    }
};

struct SkillMatchPartyRating extends TierSkillRating
{
    var int PartyID;
};

struct GroupSkillRating extends TierSkillRating
{
    var array< class > Players;
};
/*
struct native CrossplayGroup
{
    var array<coerce out GetAPlayerController> Platforms;

    structdefaultproperties
    {
        Platforms=none
    }
};

var delegate<@NULL> __KeyPressDelegate__Delegate;
var delegate<@NULL> __OnPriviledgeChecked__Delegate;

delegate bool KeyPressDelegate()
{
    //return ReturnValue;    
}

delegate OnPriviledgeChecked(IsInTransientPackage PrivilegeCheck)
{
    //return;    
}
*/